<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Haley.WPF.BaseControls"
    xmlns:utils="clr-namespace:Haley.Utils">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/haleyRD.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="mainBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource BorderWithShadow}">
        <Style.Triggers>
            <!--When Value is true-->
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=ColorON, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>

            <!--When value is false-->
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="Background" Value="{Binding Path=ColorOFF, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="txtblckStyle" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <!--When Value is true-->
            <DataTrigger Binding="{Binding ShowText, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="Text" Value="{Binding Path=OnText, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="Grid.Column" Value="0"/>
            </DataTrigger>

            <!--When Value is false-->
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="Text" Value="{Binding Path=OffText, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="Grid.Column" Value="1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="switchButtonStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <!--When Value is true-->
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="HorizontalAlignment" Value="Right"/>
            </DataTrigger>

            <!--When value is false-->
            <DataTrigger Binding="{Binding Status, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:ToggleButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource defBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <!--Base border which lays at the bottom and covers whole length and will be filled with the color representing the status-->
                    <Border x:Name="PART_BorderMain" Style="{StaticResource mainBorderStyle}">
                        <Grid x:Name="grdMain">
                            
                            <!--First item is a grid which covers whole length and is used for displaying the text. This sits above the Main border-->
                            <Grid Margin="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="txtStatus" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" Style="{StaticResource txtblckStyle}"/>
                            </Grid>

                            <!--Second item is the switch which will be moved left or light based on status-->
                            <Border x:Name="switchBorder" Margin="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{TemplateBinding CornerRadius}" Width="{TemplateBinding SwitchWidth}" Background="{StaticResource defBackground}" Style="{StaticResource switchButtonStyle}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--For disabled status-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
