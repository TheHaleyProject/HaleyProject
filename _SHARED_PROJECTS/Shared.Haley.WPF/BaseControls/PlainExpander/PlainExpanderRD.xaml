<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Haley.WPF.BaseControls"
    xmlns:utils="clr-namespace:Haley.Utils">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/haleyRD.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <!--<Style x:Key="ColumnDefinitionStyle" TargetType="{x:Type ColumnDefinition}">
        <Setter Property="ColumnDefinition.Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                <Setter Property="ColumnDefinition.Width" Value="*"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>-->
    <Style x:Key="expanderGridStyle" TargetType="{x:Type Grid}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform Angle="-90"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform Angle="-90"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="cleanToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="itemsControlStyle" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Left">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition  Width="Auto"/>
                                </Grid.ColumnDefinitions>
                            </Grid>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ExpandDirection, RelativeSource={RelativeSource TemplatedParent}}" Value="Right">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                            </Grid>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="PlainExpanderCommmonTemplate" TargetType="local:PlainExpander">
        <!--Main Border has a background which covers both content and header. It is the parent container-->
        <Border x:Name="PART_borderMain" Style="{StaticResource BorderWithoutShadow}" Background="{TemplateBinding ContentBackground}">
            
            <!--ItemsControl is to hold the header and content. It changes its style based on expand direction. Accordingly the itemspanel will have either two rows or two columns-->
            <ItemsControl x:Name="PART_ItemsHolder" Margin="-1" Style="{StaticResource itemsControlStyle}">

                <!--First item : Header. This changes its position on the Itemscontrol based on the expand direction-->
                    <Border x:Name="PART_borderheader"  Style="{StaticResource BorderWithShadow}">
                    <!-- Toggle button changes its width or height to match min width or min height as per the expand direction-->
                    <ToggleButton x:Name="PART_toggleMain"  Focusable="False" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Style="{StaticResource cleanToggleStyle}">
                        <!--The content of the header changes its transform based on the expand direction.-->
                        <Grid Style="{StaticResource expanderGridStyle}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="35"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="10,0"/>
                            <Viewbox x:Name="PART_IconHolder" Margin="4" Grid.Column="1">
                                <local:ImageButton x:Name="PART_Icon"  IsHitTestVisible="False" DefaultImage="{TemplateBinding Icon}" DefaultImageColor="{TemplateBinding IconDefColor}"/>
                            </Viewbox>
                            </Grid>
                        </ToggleButton>
                    </Border>
                <!--Most important part which holds the content. This changes its position on the Itemscontrol based on the expand direction-->
                    <ContentPresenter Name="PART_contentHolder" Visibility="Collapsed"/>
                </ItemsControl>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="PART_borderheader" Property="Background" Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="PART_contentHolder" Value="Visible" />
                <Setter Property="LayoutTransform" TargetName="PART_Icon">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform Angle="180"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter TargetName="PART_contentHolder" Property="Grid.Column" Value="0"/>
                <Setter TargetName="PART_borderheader" Property="Grid.Column" Value="1"/>
                <Setter TargetName="PART_toggleMain" Property="Width" Value="{Binding MinWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="LayoutTransform" TargetName="PART_IconHolder">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform Angle="180"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter TargetName="PART_contentHolder" Property="Grid.Column" Value="1"/>
                <Setter TargetName="PART_toggleMain" Property="Width" Value="{Binding MinWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Down">
                <Setter TargetName="PART_contentHolder" Property="Grid.Row" Value="1"/>
                <Setter TargetName="PART_toggleMain" Property="Height" Value="{Binding MinHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter TargetName="PART_contentHolder" Property="Grid.Row" Value="0"/>
                <Setter TargetName="PART_borderheader" Property="Grid.Row" Value="1"/>
                <Setter TargetName="PART_toggleMain" Property="Height" Value="{Binding MinHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="LayoutTransform" TargetName="PART_IconHolder">
                    <Setter.Value>
                        <TransformGroup>
                            <RotateTransform Angle="180"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:PlainExpander}">
        <Setter Property="Background" Value="{StaticResource defBackground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="35" />
        <Setter Property="MinWidth" Value="35" />
        <Setter Property="Template" Value="{StaticResource PlainExpanderCommmonTemplate}"/>
    </Style>
</ResourceDictionary>
