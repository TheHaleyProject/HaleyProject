<UserControl x:Class="Haley.Wpf.BaseControls.hBtnWImageText"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Haley.Wpf.BaseControls"
             x:Name="UctrlhBtnWImageText"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Haley.Library.UI;component/AppResources/Dictionaries/RD.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Button x:Name="btnMain" Click="Button_Click" CommandParameter="{Binding UserCommandParameter,NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Command="{Binding UserCommand,NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Cursor="Hand" Height="Auto">
        <Button.Template>
            <ControlTemplate TargetType="{x:Type Button}">
                <Border CornerRadius="8" Background="{Binding CustomBackGround, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}">
                    <Grid x:Name="grdContentArea" Background="Transparent" Margin="3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition >
                                <ColumnDefinition.Style>
                                    <Style TargetType="{x:Type ColumnDefinition}">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding ImageOnLeft, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Value="true"/>
                                                    <Condition Binding="{Binding IsImageVisible, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Width" Value="35"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ColumnDefinition.Style>
                            </ColumnDefinition>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition>
                                    <ColumnDefinition.Style>
                                        <Style TargetType="{x:Type ColumnDefinition}">
                                            <Setter Property="Width" Value="Auto"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding ImageOnLeft, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Value="false"/>
                                                        <Condition Binding="{Binding IsImageVisible, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="Width" Value="35"/>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ColumnDefinition.Style>
                            </ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Image x:Name="buttonImage" Grid.Column="0" Source="{Binding ButtonImage, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Visibility="{Binding IsImageVisible, Converter={StaticResource bool_to_visibility}, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Height="{Binding ElementName=grdContentArea, Path=ActualHeight}"/>
                        <TextBlock Grid.Column="1" Text="{Binding CustomContent, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" HorizontalAlignment="Center" VerticalAlignment="Center"  Foreground="{Binding CustomForeGround, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Margin="6,0" />
                    </Grid>
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="BorderBrush" Value="{x:Null}"/>
                            <Setter Property="BorderThickness" Value="2"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="{Binding CustomBorderHighlight, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding Path=IsFocused, ElementName=UctrlhBtnWImageText}" Value="true">
                                    <Setter Property="BorderBrush" Value="{Binding CustomBorderHighlight, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                </Border>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding ImageOnLeft, NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:hBtnWImageText}}}" Value="false">
                        <Setter TargetName="buttonImage" Property="Grid.Column" Value="2"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Button.Template>
    </Button>
</UserControl>
